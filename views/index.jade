extends layout

block content
  h1 UNHCR Diction
  input(type="text", id="search", placeholder="Search for a word... like innovation")
  div(id="figure")

block scripts
  script.
    $(document).ready(function() {
      var o = !{data}
      console.log(o)
      var ENTER = 13;
      var DURATION = 500;

      $('#search').on('keyup', function(e) {
        if (e.keyCode == ENTER) {
          $.get('/search', { query: $(e.currentTarget).val() }, function(response) {
            c.data(response.rows)()
          });

        }

      })

      var chart = function(attrs) {
        var defaults = {
          height: 300,
          svg: d3.select('#figure'),
          data: [],
          margin: { top: 10, bottom: 50, left: 50, right: 10 },
          docs: []
        };

        var docHash = {}
        _.each(attrs.docs, function(doc) {
          docHash[doc.value.id] = doc.value
        })

        _.defaults(attrs, defaults);
        attrs.width = attrs.docs.length + attrs.margin.left + attrs.margin.right;

        var x = d3.scale.ordinal()
          .domain(_.map(attrs.docs.sort(compareDocs), function(d) { return d.id; }))
          .range(_.map(attrs.docs, function(d, i) { return i; }))

        var xAxis = d3.svg.axis()
          .scale(x)
          .orient("bottom")
          .tickFormat('')
          .tickSize(0);

        var g = attrs.svg.append('svg')
          .attr("width", attrs.width)
          .attr("height", attrs.height)
          .append("g")
          .attr("transform", "translate(" + attrs.margin.left + "," + attrs.margin.top + ")");

        attrs.height = attrs.height - attrs.margin.top - attrs.margin.bottom;

        var y = d3.scale.linear()
          .domain([0, 50])
          .range([attrs.height, 0])

        var yAxis = d3.svg.axis()
          .scale(y)
          .ticks(5)
          .orient("left")
          .tickSize(-attrs.width, 0, 0)
          .tickPadding(8);

        g.append('g')
          .attr('class', 'x axis')
          .attr('transform', 'translate(0, ' + attrs.height + ')')
          .call(xAxis)

        g.append('g')
          .attr('class', 'y axis')
          .call(yAxis)


        function render() {
          max = d3.max(attrs.data, function(d) { return d.value.count }) || 0
          if (max < 30)
            max = 30;
          y.domain([0, max])
          var bars = g.selectAll('.bar').data(attrs.data.sort(compare), function(d) {
            return d.value.docId;
          });
          bars.enter().append('rect')
          bars
            .attr('y', y(0))
            .transition()
            .duration(DURATION)
            .attr('height', function(d, i) {
              return y(0) - y(d.value.count);
            })
            .attr('y', function(d, i) {
              console.log(d.value.count);
              return y(d.value.count);
            })
            .attr('x', function(d, i) {
              return x(d.value.docId);
            })
            .attr('width', function(d, i) {
              return 1;
            })
            .attr('class', function(d, i) {
              return ['bar', d.value.docId, docHash[d.value.docId].author].join(' ');
            })
          bars.on('mouseover', function(d) {
            console.log(new Date(docHash[d.value.docId].date));
          })
          bars.exit()
            .transition()
            .duration(DURATION)
            .attr('height', 0)
            .attr('y', y(0))
            .remove()

          g.select('.y.axis')
            .transition()
            .duration(DURATION)
            .call(yAxis);

        }

        function compare(a, b) {
          return new Date(docHash[b.value.docId].date) - new Date(+docHash[a.value.docId].date)
        }
        function compareDocs(a, b) {
          return new Date(a.date) - new Date(b.date)
        }

        render.data = function(_data) {
          if (arguments.length) {
            attrs.data = _data;
            return render;
          }
          return attrs.data;
        }

        return render
      }

      var c = chart({
        docs: o.rows
      })
      c()
    });
